The order maintenance problem (sometimes called "maintaining order in a list") is to maintain a data structure that offers the operations:

bool in_order(const node * x, const node * y): x and y must be pointers to nodes in the same list. Returns true when x precedes y in the list.
node * insert_after(node * x): returns a pointer to a newly created node placed just after x. Nodes are members of only one list. if x is NULL, creates a list with a single node.

and often:

void delete(node * x): removes the node x from the list it belongs to.

This structure has many applications, including fully persistent arrays [5], ancestor queries in trees [4], partially persistent van Emde Boas trees [1], context trees [4], pattern matching in dynamic texts [2] and pattern matching in trees [3].

[1] Persistent Predecessor Search and Orthogonal Point Location on the Word RAM,, Timothy M. Chan, SODA 2011
[2] Dynamic Pattern Matching, Stephen Alstrup, Gerth St√∏lting Brodal, and Theis Rauhe, Technical Report, DIKU Report 98/27, Department of Computer Science, University of Copenhagen, 16 pages, 1998, http://cs.au.dk/~gerth/pub/diku-98-27.html
[3] Efficient preprocessing of simple binary pattern forests, Mikkel Thorup, SWAT 94
[4] Dietz, Maintaining Order in a Linked List
[5] Dietz, Fully Persistent Arrays